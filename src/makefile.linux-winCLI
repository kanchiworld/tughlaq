# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

TARGET_PLATFORM := x86_64
DEPSDIR := ../depends/$(TARGET_PLATFORM)-w64-mingw32/
CC:=$(TARGET_PLATFORM)-w64-mingw32-gcc
CXX:=$(TARGET_PLATFORM)-w64-mingw32-g++
RANLIB=$(TARGET_PLATFORM)-w64-mingw32-ranlib
STRIP=$(TARGET_PLATFORM)-w64-mingw32-strip
# Gautam 7.3.21 Added AR variable. Use as per the platform
# AR variable is passed to Makefile of leveldb. It is not used here.
AR=$(TARGET_PLATFORM)-w64-mingw32-ar

USE_UPNP:=1
USE_IPV6:=1

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)"/obj \
 -I"$(DEPSDIR)/include" \
 -I"$(DEPSDIR)"

LIBPATHS= \
 -L"$(DEPSDIR)/lib"

LIBS= \
 -l boost_system-mt-s-x64 \
 -l boost_filesystem-mt-s-x64 \
 -l boost_program_options-mt-s-x64 \
 -l boost_thread-mt-s-x64 \
 -l boost_chrono-mt-s-x64 \
 -l db_cxx \
 -l ssl \
 -l crypto \
 -l curl \
 -l minizip

DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DCURL_STATICLIB
DEBUGFLAGS=-g
CFLAGS=-O3 -msse2 -w -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)
LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat -static-libgcc -static-libstdc++

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	LIBS += -l miniupnpc -l iphlpapi
	DEFS += -DSTATICLIB -DMINIUPNP_STATICLIB -DUSE_UPNP=$(USE_UPNP)
endif
 
ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi -l crypt32 -lwldap32 -lz

# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/main.o \
    obj/miner.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/scrypt.o \
    obj/scrypt-x86.o \
    obj/scrypt-x64.o \
    obj/sha2-x86.o \
    obj/sha2-x64.o \
    obj/miniunz.o \
    obj/transaction.o \
    obj/block.o \
    obj/mempool.o \
    obj/node.o

all: tughlaqd.exe

LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += -I"$(CURDIR)/leveldb/include"
DEFS += -I"$(CURDIR)/leveldb/helpers"
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..." && cd leveldb && CC=$(CC) CXX=$(CXX) AR=$(AR) TARGET_OS=OS_WINDOWS_CROSSCOMPILE CXXFLAGS="-I$(INCLUDEPATHS)" LDFLAGS="-L$(LIBPATHS)" $(MAKE) libleveldb.a libmemenv.a && $(RANLIB) libleveldb.a && $(RANLIB) libmemenv.a && cd ..
obj/txdb-leveldb.o: leveldb/libleveldb.a

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/%.o: %.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -o $@ $<

tughlaqd.exe: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) -lshlwapi
	$(STRIP) tughlaqd.exe

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

obj/scrypt-x64.o: scrypt-x64.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

obj/sha2-x86.o: sha2-x86.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

obj/sha2-x64.o: sha2-x64.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

clean:
	-rm -f obj/*.o
	-rm -f tughlaqd.exe
	-rm -f obj/build.h
	cd leveldb && TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) clean && cd ..

FORCE:
